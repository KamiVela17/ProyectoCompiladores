
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DEF DIVIDE EQUALS FLOAT IDENTIFIER LBRACE LPAREN MINUS NEWLINE NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON STRING TIMESprogram : statements\n    statements : statement\n               | statement statements\n    \n    statement : function_definition\n              | assignment_statement\n              | expression_statement\n              | return_statement\n    function_definition : DEF IDENTIFIER LPAREN opt_parameter_list RPAREN COLON blockreturn_statement : RETURN expression SEMICOLON\n    block : LBRACE statements RBRACE\n          | statement\n    \n    opt_parameter_list : parameter_list\n                       | empty\n    \n    parameter_list : IDENTIFIER\n                   | IDENTIFIER COMMA parameter_list\n    assignment_statement : IDENTIFIER EQUALS expression SEMICOLONexpression_statement : expression SEMICOLON\n    expression : term\n               | expression PLUS term\n               | expression MINUS term\n               | IDENTIFIER LPAREN opt_argument_list RPAREN\n    \n    opt_argument_list : argument_list\n                      | empty\n    \n    argument_list : expression\n                  | expression COMMA argument_list\n    \n    term : factor\n         | term TIMES factor\n         | term DIVIDE factor\n    \n    factor : NUMBER\n           | float_literal\n           | string_literal\n           | IDENTIFIER\n           | LPAREN expression RPAREN\n    float_literal : FLOATnewline : NEWLINEstring_literal : STRINGempty :'
    
_lr_action_items = {'DEF':([0,3,4,5,6,7,26,42,49,56,57,58,59,61,],[8,8,-4,-5,-6,-7,-17,-9,-16,8,-8,8,-11,-10,]),'IDENTIFIER':([0,3,4,5,6,7,8,10,12,22,23,26,27,28,30,31,32,42,49,51,52,56,57,58,59,61,],[9,9,-4,-5,-6,-7,21,25,25,25,25,-17,40,40,40,40,45,-9,-16,25,45,9,-8,9,-11,-10,]),'RETURN':([0,3,4,5,6,7,26,42,49,56,57,58,59,61,],[12,12,-4,-5,-6,-7,-17,-9,-16,12,-8,12,-11,-10,]),'NUMBER':([0,3,4,5,6,7,10,12,22,23,26,27,28,30,31,42,49,51,56,57,58,59,61,],[15,15,-4,-5,-6,-7,15,15,15,15,-17,15,15,15,15,-9,-16,15,15,-8,15,-11,-10,]),'LPAREN':([0,3,4,5,6,7,9,10,12,21,22,23,25,26,27,28,30,31,42,49,51,56,57,58,59,61,],[10,10,-4,-5,-6,-7,23,10,10,32,10,10,23,-17,10,10,10,10,-9,-16,10,10,-8,10,-11,-10,]),'FLOAT':([0,3,4,5,6,7,10,12,22,23,26,27,28,30,31,42,49,51,56,57,58,59,61,],[18,18,-4,-5,-6,-7,18,18,18,18,-17,18,18,18,18,-9,-16,18,18,-8,18,-11,-10,]),'STRING':([0,3,4,5,6,7,10,12,22,23,26,27,28,30,31,42,49,51,56,57,58,59,61,],[19,19,-4,-5,-6,-7,19,19,19,19,-17,19,19,19,19,-9,-16,19,19,-8,19,-11,-10,]),'$end':([1,2,3,4,5,6,7,20,26,42,49,57,59,61,],[0,-1,-2,-4,-5,-6,-7,-3,-17,-9,-16,-8,-11,-10,]),'RBRACE':([3,4,5,6,7,20,26,42,49,57,59,60,61,],[-2,-4,-5,-6,-7,-3,-17,-9,-16,-8,-11,61,-10,]),'EQUALS':([9,],[22,]),'TIMES':([9,13,14,15,16,17,18,19,25,38,39,40,41,43,44,],[-32,30,-26,-29,-30,-31,-34,-36,-32,-33,30,-32,30,-27,-28,]),'DIVIDE':([9,13,14,15,16,17,18,19,25,38,39,40,41,43,44,],[-32,31,-26,-29,-30,-31,-34,-36,-32,-33,31,-32,31,-27,-28,]),'SEMICOLON':([9,11,13,14,15,16,17,18,19,25,29,33,38,39,40,41,43,44,50,],[-32,26,-18,-26,-29,-30,-31,-34,-36,-32,42,49,-33,-19,-32,-20,-27,-28,-21,]),'PLUS':([9,11,13,14,15,16,17,18,19,24,25,29,33,37,38,39,40,41,43,44,50,],[-32,27,-18,-26,-29,-30,-31,-34,-36,27,-32,27,27,27,-33,-19,-32,-20,-27,-28,-21,]),'MINUS':([9,11,13,14,15,16,17,18,19,24,25,29,33,37,38,39,40,41,43,44,50,],[-32,28,-18,-26,-29,-30,-31,-34,-36,28,-32,28,28,28,-33,-19,-32,-20,-27,-28,-21,]),'RPAREN':([13,14,15,16,17,18,19,23,24,25,32,34,35,36,37,38,39,40,41,43,44,45,46,47,48,50,54,55,],[-18,-26,-29,-30,-31,-34,-36,-37,38,-32,-37,50,-22,-23,-24,-33,-19,-32,-20,-27,-28,-14,53,-12,-13,-21,-25,-15,]),'COMMA':([13,14,15,16,17,18,19,25,37,38,39,40,41,43,44,45,50,],[-18,-26,-29,-30,-31,-34,-36,-32,51,-33,-19,-32,-20,-27,-28,52,-21,]),'COLON':([53,],[56,]),'LBRACE':([56,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,58,],[2,20,60,]),'statement':([0,3,56,58,],[3,3,59,3,]),'function_definition':([0,3,56,58,],[4,4,4,4,]),'assignment_statement':([0,3,56,58,],[5,5,5,5,]),'expression_statement':([0,3,56,58,],[6,6,6,6,]),'return_statement':([0,3,56,58,],[7,7,7,7,]),'expression':([0,3,10,12,22,23,51,56,58,],[11,11,24,29,33,37,37,11,11,]),'term':([0,3,10,12,22,23,27,28,51,56,58,],[13,13,13,13,13,13,39,41,13,13,13,]),'factor':([0,3,10,12,22,23,27,28,30,31,51,56,58,],[14,14,14,14,14,14,14,14,43,44,14,14,14,]),'float_literal':([0,3,10,12,22,23,27,28,30,31,51,56,58,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'string_literal':([0,3,10,12,22,23,27,28,30,31,51,56,58,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'opt_argument_list':([23,],[34,]),'argument_list':([23,51,],[35,54,]),'empty':([23,32,],[36,48,]),'opt_parameter_list':([32,],[46,]),'parameter_list':([32,52,],[47,55,]),'block':([56,],[57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',9),
  ('statements -> statement','statements',1,'p_statements','parser.py',15),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',16),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',26),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',28),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',29),
  ('function_definition -> DEF IDENTIFIER LPAREN opt_parameter_list RPAREN COLON block','function_definition',7,'p_function_definition','parser.py',34),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',41),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',48),
  ('block -> statement','block',1,'p_block','parser.py',49),
  ('opt_parameter_list -> parameter_list','opt_parameter_list',1,'p_opt_parameter_list','parser.py',59),
  ('opt_parameter_list -> empty','opt_parameter_list',1,'p_opt_parameter_list','parser.py',60),
  ('parameter_list -> IDENTIFIER','parameter_list',1,'p_parameter_list','parser.py',66),
  ('parameter_list -> IDENTIFIER COMMA parameter_list','parameter_list',3,'p_parameter_list','parser.py',67),
  ('assignment_statement -> IDENTIFIER EQUALS expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',75),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',81),
  ('expression -> term','expression',1,'p_expression','parser.py',86),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',87),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',88),
  ('expression -> IDENTIFIER LPAREN opt_argument_list RPAREN','expression',4,'p_expression','parser.py',89),
  ('opt_argument_list -> argument_list','opt_argument_list',1,'p_opt_argument_list','parser.py',104),
  ('opt_argument_list -> empty','opt_argument_list',1,'p_opt_argument_list','parser.py',105),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',112),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','parser.py',113),
  ('term -> factor','term',1,'p_term','parser.py',124),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',125),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',126),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',140),
  ('factor -> float_literal','factor',1,'p_factor','parser.py',141),
  ('factor -> string_literal','factor',1,'p_factor','parser.py',142),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',143),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',144),
  ('float_literal -> FLOAT','float_literal',1,'p_float_literal','parser.py',160),
  ('newline -> NEWLINE','newline',1,'p_newline','parser.py',165),
  ('string_literal -> STRING','string_literal',1,'p_string_literal','parser.py',170),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',175),
]
