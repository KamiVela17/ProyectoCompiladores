
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLTEGTEleftPLUSMINUSleftTIMESDIVIDEAND ASSIGN BREAK COLON COMMA CONTINUE DIVIDE ELSE EQ FALSE FLOAT GT GTE IF INT LBRACK LPAREN LSQBRACK LT LTE MINUS MOD NAME NEQ NONE OR PLUS PRINT RBRACK RETURN RPAREN RSQBRACK SEMICOLON STRING TIMES TRUE WHILEprogram : stmt_liststmt_list : stmt_list stmt\n                    | stmt\n        stmt : simple_stmt\n                | compound_stmt\n        compound_stmt : if_stmt\n                        | while_stmt\n                        | print\n        simple_stmt : small_stmt SEMICOLON\n        small_stmt : test\n                    | flow_stmt\n        print : PRINT LPAREN small_stmt RPAREN SEMICOLONflow_stmt : RETURN\n                    | BREAK\n                    | CONTINUE\n        while_stmt : WHILE test COLON suite\n                    | WHILE test COLON suite ELSE COLON suite\n        if_stmt : IF test COLON suite\n                    | IF test COLON suite ELSE COLON suite\n        suite : simple_stmt\n                | LBRACK stmt_list RBRACK\n        test : comparison OR test\n                | comparison AND test\n                | comparison\n        comparison : expr GT expr\n                    | expr LT expr\n                    | expr GTE expr\n                    | expr LTE expr\n                    | expr EQ expr\n                    | expr NEQ expr\n                    | expr\n        expr : NAME ASSIGN exprexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD expr\n                | factor\n        factor : PLUS factor\n                | MINUS factor\n                | atom_expratom_expr : atomatom : LPAREN list_expr RPAREN\n                | LSQBRACK list_expr RSQBRACK\n                | name\n                | number\n                | string\n                | TRUE\n                | FALSE\n                | NONE\n        list_expr : list_expr COMMA atom_expr\n                    | atom_expr\n        name : NAMEnumber : INT\n                | FLOAT\n        string : STRING'
    
_lr_action_items = {'IF':([0,2,3,4,5,7,8,9,37,38,82,83,84,85,89,91,93,95,96,],[12,12,-3,-4,-5,-6,-7,-8,-2,-9,-18,-20,12,-16,12,-12,-21,-19,-17,]),'WHILE':([0,2,3,4,5,7,8,9,37,38,82,83,84,85,89,91,93,95,96,],[13,13,-3,-4,-5,-6,-7,-8,-2,-9,-18,-20,13,-16,13,-12,-21,-19,-17,]),'PRINT':([0,2,3,4,5,7,8,9,37,38,82,83,84,85,89,91,93,95,96,],[14,14,-3,-4,-5,-6,-7,-8,-2,-9,-18,-20,14,-16,14,-12,-21,-19,-17,]),'RETURN':([0,2,3,4,5,7,8,9,37,38,41,62,63,82,83,84,85,89,91,92,93,94,95,96,],[17,17,-3,-4,-5,-6,-7,-8,-2,-9,17,17,17,-18,-20,17,-16,17,-12,17,-21,17,-19,-17,]),'BREAK':([0,2,3,4,5,7,8,9,37,38,41,62,63,82,83,84,85,89,91,92,93,94,95,96,],[18,18,-3,-4,-5,-6,-7,-8,-2,-9,18,18,18,-18,-20,18,-16,18,-12,18,-21,18,-19,-17,]),'CONTINUE':([0,2,3,4,5,7,8,9,37,38,41,62,63,82,83,84,85,89,91,92,93,94,95,96,],[19,19,-3,-4,-5,-6,-7,-8,-2,-9,19,19,19,-18,-20,19,-16,19,-12,19,-21,19,-19,-17,]),'NAME':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[21,21,-3,-4,-5,-6,-7,-8,21,21,44,44,44,44,-2,-9,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,44,-18,-20,21,-16,21,-12,21,-21,21,-19,-17,]),'PLUS':([0,2,3,4,5,7,8,9,12,13,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,89,91,92,93,94,95,96,],[22,22,-3,-4,-5,-6,-7,-8,22,22,53,-53,22,22,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-2,-9,22,-53,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-39,-40,22,22,-43,53,53,53,53,53,53,-33,-34,-35,-36,53,53,-44,-18,-20,22,-16,22,-12,22,-21,22,-19,-17,]),'MINUS':([0,2,3,4,5,7,8,9,12,13,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,89,91,92,93,94,95,96,],[23,23,-3,-4,-5,-6,-7,-8,23,23,54,-53,23,23,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-2,-9,23,-53,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-39,-40,23,23,-43,54,54,54,54,54,54,-33,-34,-35,-36,54,54,-44,-18,-20,23,-16,23,-12,23,-21,23,-19,-17,]),'LPAREN':([0,2,3,4,5,7,8,9,12,13,14,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[15,15,-3,-4,-5,-6,-7,-8,15,15,41,15,15,15,15,-2,-9,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-18,-20,15,-16,15,-12,15,-21,15,-19,-17,]),'LSQBRACK':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[27,27,-3,-4,-5,-6,-7,-8,27,27,27,27,27,27,-2,-9,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-18,-20,27,-16,27,-12,27,-21,27,-19,-17,]),'TRUE':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[31,31,-3,-4,-5,-6,-7,-8,31,31,31,31,31,31,-2,-9,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-18,-20,31,-16,31,-12,31,-21,31,-19,-17,]),'FALSE':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[32,32,-3,-4,-5,-6,-7,-8,32,32,32,32,32,32,-2,-9,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-18,-20,32,-16,32,-12,32,-21,32,-19,-17,]),'NONE':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[33,33,-3,-4,-5,-6,-7,-8,33,33,33,33,33,33,-2,-9,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-18,-20,33,-16,33,-12,33,-21,33,-19,-17,]),'INT':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[34,34,-3,-4,-5,-6,-7,-8,34,34,34,34,34,34,-2,-9,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-18,-20,34,-16,34,-12,34,-21,34,-19,-17,]),'FLOAT':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[35,35,-3,-4,-5,-6,-7,-8,35,35,35,35,35,35,-2,-9,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-18,-20,35,-16,35,-12,35,-21,35,-19,-17,]),'STRING':([0,2,3,4,5,7,8,9,12,13,15,22,23,27,37,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,82,83,84,85,89,91,92,93,94,95,96,],[36,36,-3,-4,-5,-6,-7,-8,36,36,36,36,36,36,-2,-9,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-18,-20,36,-16,36,-12,36,-21,36,-19,-17,]),'$end':([1,2,3,4,5,7,8,9,37,38,82,83,85,91,93,95,96,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-9,-18,-20,-16,-12,-21,-19,-17,]),'RBRACK':([3,4,5,7,8,9,37,38,82,83,85,89,91,93,95,96,],[-3,-4,-5,-6,-7,-8,-2,-9,-18,-20,-16,93,-12,-21,-19,-17,]),'SEMICOLON':([6,10,11,16,17,18,19,20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,],[38,-10,-11,-24,-13,-14,-15,-31,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-22,-23,-25,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-32,-44,91,]),'RPAREN':([10,11,16,17,18,19,20,21,24,25,26,28,29,30,31,32,33,34,35,36,42,43,44,59,60,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,],[-10,-11,-24,-13,-14,-15,-31,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,65,-52,-53,-39,-40,86,-43,-22,-23,-25,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-32,-44,-51,]),'OR':([16,20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,69,70,71,72,73,74,75,76,77,78,79,80,81,],[45,-31,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-25,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-32,-44,]),'AND':([16,20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,69,70,71,72,73,74,75,76,77,78,79,80,81,],[46,-31,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-25,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-32,-44,]),'COLON':([16,20,21,24,25,26,28,29,30,31,32,33,34,35,36,39,40,44,59,60,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,88,90,],[-24,-31,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,62,63,-53,-39,-40,-43,-22,-23,-25,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-32,-44,92,94,]),'GT':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,75,76,77,78,79,80,81,],[47,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-33,-34,-35,-36,-37,-32,-44,]),'LT':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,75,76,77,78,79,80,81,],[48,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-33,-34,-35,-36,-37,-32,-44,]),'GTE':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,75,76,77,78,79,80,81,],[49,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-33,-34,-35,-36,-37,-32,-44,]),'LTE':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,75,76,77,78,79,80,81,],[50,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-33,-34,-35,-36,-37,-32,-44,]),'EQ':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,75,76,77,78,79,80,81,],[51,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-33,-34,-35,-36,-37,-32,-44,]),'NEQ':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,75,76,77,78,79,80,81,],[52,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,-33,-34,-35,-36,-37,-32,-44,]),'TIMES':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,69,70,71,72,73,74,75,76,77,78,79,80,81,],[55,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,55,55,55,55,55,55,55,55,-35,-36,55,55,-44,]),'DIVIDE':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,69,70,71,72,73,74,75,76,77,78,79,80,81,],[56,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,56,56,56,56,56,56,56,56,-35,-36,56,56,-44,]),'MOD':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,44,59,60,65,69,70,71,72,73,74,75,76,77,78,79,80,81,],[57,-53,-38,-41,-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-53,-39,-40,-43,57,57,57,57,57,57,-33,-34,-35,-36,57,57,-44,]),'ASSIGN':([21,],[58,]),'COMMA':([26,28,29,30,31,32,33,34,35,36,42,43,44,61,65,81,87,],[-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,66,-52,-53,66,-43,-44,-51,]),'RSQBRACK':([26,28,29,30,31,32,33,34,35,36,43,44,61,65,81,87,],[-42,-45,-46,-47,-48,-49,-50,-54,-55,-56,-52,-53,81,-43,-44,-51,]),'ELSE':([38,82,83,85,93,],[-9,88,-20,90,-21,]),'LBRACK':([62,63,92,94,],[84,84,84,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,84,],[2,89,]),'stmt':([0,2,84,89,],[3,37,3,37,]),'simple_stmt':([0,2,62,63,84,89,92,94,],[4,4,83,83,4,4,83,83,]),'compound_stmt':([0,2,84,89,],[5,5,5,5,]),'small_stmt':([0,2,41,62,63,84,89,92,94,],[6,6,64,6,6,6,6,6,6,]),'if_stmt':([0,2,84,89,],[7,7,7,7,]),'while_stmt':([0,2,84,89,],[8,8,8,8,]),'print':([0,2,84,89,],[9,9,9,9,]),'test':([0,2,12,13,41,45,46,62,63,84,89,92,94,],[10,10,39,40,10,67,68,10,10,10,10,10,10,]),'flow_stmt':([0,2,41,62,63,84,89,92,94,],[11,11,11,11,11,11,11,11,11,]),'comparison':([0,2,12,13,41,45,46,62,63,84,89,92,94,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'expr':([0,2,12,13,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,84,89,92,94,],[20,20,20,20,20,20,20,69,70,71,72,73,74,75,76,77,78,79,80,20,20,20,20,20,20,]),'factor':([0,2,12,13,22,23,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,84,89,92,94,],[24,24,24,24,59,60,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'atom_expr':([0,2,12,13,15,22,23,27,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,84,89,92,94,],[25,25,25,25,43,25,25,43,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,87,25,25,25,25,]),'atom':([0,2,12,13,15,22,23,27,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,84,89,92,94,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'name':([0,2,12,13,15,22,23,27,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,84,89,92,94,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'number':([0,2,12,13,15,22,23,27,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,84,89,92,94,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'string':([0,2,12,13,15,22,23,27,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,84,89,92,94,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'list_expr':([15,27,],[42,61,]),'suite':([62,63,92,94,],[82,85,95,96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',16),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser.py',20),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',21),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','parser.py',32),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','parser.py',33),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','parser.py',39),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','parser.py',40),
  ('compound_stmt -> print','compound_stmt',1,'p_compound_stmt','parser.py',41),
  ('simple_stmt -> small_stmt SEMICOLON','simple_stmt',2,'p_simple_stmt','parser.py',47),
  ('small_stmt -> test','small_stmt',1,'p_small_stmt','parser.py',54),
  ('small_stmt -> flow_stmt','small_stmt',1,'p_small_stmt','parser.py',55),
  ('print -> PRINT LPAREN small_stmt RPAREN SEMICOLON','print',5,'p_print','parser.py',60),
  ('flow_stmt -> RETURN','flow_stmt',1,'p_flow_stmt','parser.py',65),
  ('flow_stmt -> BREAK','flow_stmt',1,'p_flow_stmt','parser.py',66),
  ('flow_stmt -> CONTINUE','flow_stmt',1,'p_flow_stmt','parser.py',67),
  ('while_stmt -> WHILE test COLON suite','while_stmt',4,'p_while_stmt','parser.py',73),
  ('while_stmt -> WHILE test COLON suite ELSE COLON suite','while_stmt',7,'p_while_stmt','parser.py',74),
  ('if_stmt -> IF test COLON suite','if_stmt',4,'p_if_stmt','parser.py',83),
  ('if_stmt -> IF test COLON suite ELSE COLON suite','if_stmt',7,'p_if_stmt','parser.py',84),
  ('suite -> simple_stmt','suite',1,'p_suite','parser.py',92),
  ('suite -> LBRACK stmt_list RBRACK','suite',3,'p_suite','parser.py',93),
  ('test -> comparison OR test','test',3,'p_test','parser.py',103),
  ('test -> comparison AND test','test',3,'p_test','parser.py',104),
  ('test -> comparison','test',1,'p_test','parser.py',105),
  ('comparison -> expr GT expr','comparison',3,'p_comparison','parser.py',114),
  ('comparison -> expr LT expr','comparison',3,'p_comparison','parser.py',115),
  ('comparison -> expr GTE expr','comparison',3,'p_comparison','parser.py',116),
  ('comparison -> expr LTE expr','comparison',3,'p_comparison','parser.py',117),
  ('comparison -> expr EQ expr','comparison',3,'p_comparison','parser.py',118),
  ('comparison -> expr NEQ expr','comparison',3,'p_comparison','parser.py',119),
  ('comparison -> expr','comparison',1,'p_comparison','parser.py',120),
  ('expr -> NAME ASSIGN expr','expr',3,'p_assign_expr','parser.py',128),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',134),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',135),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',136),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',137),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',138),
  ('expr -> factor','expr',1,'p_expr','parser.py',139),
  ('factor -> PLUS factor','factor',2,'p_factor','parser.py',148),
  ('factor -> MINUS factor','factor',2,'p_factor','parser.py',149),
  ('factor -> atom_expr','factor',1,'p_factor','parser.py',150),
  ('atom_expr -> atom','atom_expr',1,'p_atom_expr','parser.py',156),
  ('atom -> LPAREN list_expr RPAREN','atom',3,'p_atom','parser.py',163),
  ('atom -> LSQBRACK list_expr RSQBRACK','atom',3,'p_atom','parser.py',164),
  ('atom -> name','atom',1,'p_atom','parser.py',165),
  ('atom -> number','atom',1,'p_atom','parser.py',166),
  ('atom -> string','atom',1,'p_atom','parser.py',167),
  ('atom -> TRUE','atom',1,'p_atom','parser.py',168),
  ('atom -> FALSE','atom',1,'p_atom','parser.py',169),
  ('atom -> NONE','atom',1,'p_atom','parser.py',170),
  ('list_expr -> list_expr COMMA atom_expr','list_expr',3,'p_list_expr','parser.py',186),
  ('list_expr -> atom_expr','list_expr',1,'p_list_expr','parser.py',187),
  ('name -> NAME','name',1,'p_name','parser.py',197),
  ('number -> INT','number',1,'p_number','parser.py',201),
  ('number -> FLOAT','number',1,'p_number','parser.py',202),
  ('string -> STRING','string',1,'p_string','parser.py',207),
]
